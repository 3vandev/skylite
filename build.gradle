import org.gradle.internal.os.OperatingSystem
import io.github.solclient.gradle.remapping.ReplayModRemapper
import io.github.solclient.gradle.dist.DistTask

plugins {
	id 'maven-publish'
	alias libs.plugins.quilt.loom
	alias libs.plugins.lombok
	alias libs.plugins.shadow
	alias libs.plugins.licenser
	alias libs.plugins.blossom
}

repositories {
	mavenCentral()
	maven { url 'https://maven.fabricmc.net' }
	maven { url 'https://repo.legacyfabric.net/repository/legacyfabric' }
	maven { url 'https://repo.hypixel.net/repository/Hypixel' }
	maven { url 'https://jitpack.io' }
	maven { url 'https://pkgs.dev.azure.com/djtheredstoner/DevAuth/_packaging/public/maven/v1' }
}

configurations {
	shade
	export
	implementation.extendsFrom export
}

dependencies {
	minecraft(libs.minecraft) { exclude group: 'org.apache.logging.log4j' }
	mappings variantOf(libs.yarn) { classifier 'v2' }
	shade variantOf(libs.intermediary) { classifier 'v2' }

	def occlusionCulling = files('libs/occlusionculling.jar')

	export(libs.mixin) { transitive = false }
	implementation occlusionCulling
	shade occlusionCulling
	export(libs.hypixel.api) { transitive = false }
	export libs.discord.game.sdk4j
	export libs.java.websocket
	export libs.cosmetica.dot.java
	export libs.access.widener
	export libs.lwjgl.patched
	shade libs.lwjgl.patched
	export libs.tiny.remapper
	implementation libs.devauth

	export libs.asm
	export libs.asm.analysis
	export libs.asm.commons
	export libs.asm.tree
	export libs.asm.util

	annotationProcessor libs.asm
	annotationProcessor libs.asm.analysis
	annotationProcessor libs.asm.commons
	annotationProcessor libs.asm.tree
	annotationProcessor libs.asm.util

	def remapper = new ReplayModRemapper(project)
	remapper.prepare()
	implementation files(remapper.createNamedMapped())
	shade files(remapper.createIntermediaryMapped())

	switch (OperatingSystem.current()) {
		case OperatingSystem.LINUX:
			def osArch = System.getProperty('os.arch')
			project.ext.lwjglNatives = osArch.startsWith('arm') || osArch.startsWith('aarch64')
				? "natives-linux-${osArch.contains('64') || osArch.startsWith('armv8') ? 'arm64' : 'arm32'}"
				: "natives-linux"
			break
		case OperatingSystem.MAC_OS:
			project.ext.lwjglNatives = System.getProperty('os.arch').startsWith('aarch64') ? 'natives-macos-arm64' : 'natives-macos'
			break
		case OperatingSystem.WINDOWS:
			def osArch = System.getProperty('os.arch')
			project.ext.lwjglNatives = osArch.contains('64')
				? "natives-windows${osArch.startsWith('aarch64') ? '-arm64' : ''}"
				: 'natives-windows-x86'
			break
	}

	runtimeOnly(variantOf(libs.lwjgl) {
		classifier project.ext.lwjglNatives
	}) {
		transitive = false
	}
	runtimeOnly(variantOf(libs.lwjgl.nanovg) {
		classifier project.ext.lwjglNatives
	}) {
		transitive = false
	}
}

loom {
	setIntermediaryUrl 'https://maven.legacyfabric.net/net/fabricmc/intermediary/%1$s/intermediary-%1$s-v2.jar'
	log4jConfigs.setFrom 'log4j2.xml'
	accessWidenerPath = file("src/main/resources/replay-mod.accesswidener")

	runConfigs.each {
		it.defaultMainClass 'io.github.solclient.wrapper.Launcher'
		it.programArgs.add '--accessToken'
		it.programArgs.add '0'
		it.programArgs.add '--username'
		it.programArgs.add 'Player'
	}
}

java {
	group 'io.github.solclient'
	version file('version.txt').getText('UTF-8')

	sourceCompatibility = 8
	targetCompatibility = 8

	jar {
		enabled = false
		dependsOn shadowJar
	}
}

license {
	rule file('HEADER')
	include '**/*.java'
}

blossom {
	def constants = 'src/main/java/io/github/solclient/util/GlobalConstants.java'
	replaceToken('%VERSION%', version, constants)
}

shadowJar {
	finalizedBy remapJar
	from('../LICENSE') {
		rename { "${it}_${name}" }
	}
	configurations = [project.configurations.shade]
	classifier 'dev'
	destinationDirectory.set file("$buildDir/devlibs")
}

tasks.register('dist', DistTask) {
	dependsOn build
	input = tasks.remapJar.outputs.files.getAt 0
	destination = file "$buildDir/dist"
	libs = configurations.export
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = 'UTF-8'
	it.options.release = 8
}

// Configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
